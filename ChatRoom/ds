namespace ProtoType.Domain.Users;

public class User:AggregateRoot<long>
{
}
public static class ConstFileSignature
{
    //0
    //0
    //0
    //24
    //102
    //116
    //121
    //112

    //        { ".webm", (0, new List&lt;byte[]&gt; { new byte[] { 0x1A, 0x45, 0xDF, 0xA3 }
    //}) },
    //			{ ".mkv", (0, new List& lt; byte[]&gt; { new byte[] { 0x1A, 0x45, 0xDF, 0xA3 } }) },
    //			{ ".pdf", (0, new List& lt; byte[]&gt; { new byte[] { 0x25, 0x50, 0x44, 0x46 } }) },
    //			{ ".odt", (0, new List& lt; byte[]&gt; { new byte[] { 0x50, 0x4B, 0x03, 0x04 } }) },
    //			{ ".docx", (0, new List& lt; byte[]&gt; { new byte[] { 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x06, 0x00 } }) },
    //			{ ".doc", (0, new List& lt; byte[]&gt; { new byte[] { 0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1 } }) },



    public static readonly Dictionary<string, List<byte[]>> FileSignature =
        new Dictionary<string, List<byte[]>>{
            {
                "jpeg", new List<byte[]>
                {
                    new byte[] { 0xFF, 0xD8, 0xFF, 0xE0 },
                    new byte[] { 0xFF, 0xD8, 0xFF, 0xE2 },
                    new byte[] { 0xFF, 0xD8, 0xFF, 0xE3 },
                }


            },
            { "jpg", new List<byte[]> {
                new byte[] { 0xFF, 0xD8, 0xFF, 0xE0 },
                new byte[] { 0xFF, 0xD8, 0xFF, 0xEE },
                new byte[] { 0xFF, 0xD8, 0xFF, 0xE2 },
                new byte[] { 0xFF, 0xD8, 0xFF, 0xE3 },
                new byte[] { 0xFF, 0xD8, 0xFF, 0xE1 },
            }},
            { "mp4", new List<byte[]> {
                new byte[] {  0x00, 0x00, 0x00, 0x18, 0x66, 0x74, 0x79, 0x70 },
                new byte[] {  0, 0, 0, 32, 102, 116, 121, 112 },

            }},



        };

}

public class FileUpload : IFileData
{


    public FileUpload ()
    {

    }
    public static FileUpload FromIFormFile ( IFormFile formFile )
    {


        if (formFile==null)
            throw new FileNullException();
        return new FileUpload()
        {
            FullName=formFile.FileName,
            Length=formFile.Length,
            FileStream=formFile.OpenReadStream(),
            Bytes=formFile.OpenReadStream().GetAllBytes(),
            FileName=Path.GetFileNameWithoutExtension(formFile.FileName),
            Extention=Path.GetExtension(formFile.FileName).Replace(".", "").ToLowerInvariant()
        };
    }
    public long Length { get; protected set; }
    public string FileName { get; protected set; }
    public string FullName { get; protected set; }
    public string Extention { get; protected set; }
    public Stream FileStream { get; protected set; }

    public byte[] Bytes { get; protected set; }





}





public static class FileValidations
{
    public static bool CheckSignature ( byte[] input, string extention )
    {


        List<byte[]> signatures = ConstFileSignature.FileSignature.GetOrDefault(extention);
        return signatures.Any(signature =>
            input.Take(signature.Length).SequenceEqual(signature));


    }
    public static bool CheckSignature ( Stream input, string extention )
    {
        var reader = new BinaryReader(input);
        //using (var reader = new BinaryReader(input))
        //{
        List<byte[]> signatures = ConstFileSignature.FileSignature.GetOrDefault(extention);

        //if (signatures == null)  throw new Exception("Signature not found");

        var headerBytes = reader.ReadBytes(signatures.Max(m => m.Length));

        return signatures.Any(signature =>
            headerBytes.Take(signature.Length).SequenceEqual(signature));
        // }

    }
    public static bool IsAllowExtention ( string extention, List<FileExtention> allowExtention )
    {

        if (string.IsNullOrEmpty(extention)||!allowExtention.Select(s => s.Title.ToLowerInvariant()).Contains(extention))
        {
            return false;
        }
        return true;

    }
}







